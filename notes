How to use OpenAuth
===================

send data transfer request using AJAX to server. If server does not find the session set, then it does not save the data and sends a -1 response to the AJAX call. The client side Javascript (content.js), on receiving the negative response opens a new tab in the browser to a server script that calls the OAuth API. The API authenticates the user and calls the callback URL in the same tab. The callback URL php script creates a session for the user and closes the tab using Javascript. Once the session is created, further AJAX calls will not receive negative response.

problems
========

1. The google js file is not getting included from the remote server [Solved]

Known Bugs
==========

1. two event listeners get added every time; so everything occurs twice. The span tag for highlighting the text on pressing 'h' is added twice, and thus sent twice on pressing 's'. Even if the span tag is added once, the data is sent twice on pressing 's'.

2. Sometimes the data being sent is wrong. While sending (on pressing 's'), the data sent is not <start_pos>:<highlighted text> but <start_pos>:<"<span id='">. These are probably the instances when on pressing 'h', the span tag get added twice in a nested fashion.

*so basically for the above two bugs, we need to resolve the problem of 2 event listeners getting added.

3. When the user opens an already highlighted page and submits it (presses 's') again, the entire data is sent once again and all the entries which were already in the databases (i.e. for the part that was highlighted earlier) get duplicated. A solution for this could be to keep only one row in the database for each URI and keep the data for that URL in a concatenated form and simply update the row when the page is submitted the next time. To differentiate between the highlights of a particular user from the combined highlightings of all users for a page, we could probably maintain separate rows for all users for a URL (but all of them in a concatenated form only)

4. when the user clicks on a highlighted portion to remove that highlight, the color is removed but the span tag remains. This creates the problem of intersecting/overlapping span tags. So, find a way a to remove the entire span tag itself. If no other elegant solution exists, a solution to this could be same as that used for hightlihting a page when it is opened for the second time, that is, read the entire document.body.innerHTML, and replace the concerned span tag with the plain text.

5. Also when the user makes two highlights which are overlapping, the problem of overlapping span tags is once again introduced. So either combine them into one or make them disjoint/separated at some point in text.

6. when the user makes a highlight across elements such as <p> or <div> etc, undesirable results are achieved. In this case the span tag wraps the corresponding <div> or <div> .. </div> or </div> tags etc., which is not allowed according to HTML's syntax.

7. The data needs to be stored with a better scheme as in the current scheme, the index position has been observed to be shifting.

8. Some pages insert images in the middle of a text to insert some special characters or equations which cannot be inserted using HTML. But these when highlighted introduces tags in the highlighted part as well in the text for the text node in the onclick attribute of the highlighted part.
