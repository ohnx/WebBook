How to use OpenAuth
===================

Look at the OAuth tutorial on chrome developers tutorial site

problems
========

1. The google js file is not getting included from the remote server

[Solved]

	Inclusion of external files is not allowed by Chrome's security policy. But now doing this is no longer a problem. Chrome itself provides an OAuth library which can be included in the extension package itself.


Known Bugs
==========

1(a) two event listeners get added every time; so everything occurs twice. The span tag for highlighting the text on pressing 'h' is added twice, and thus sent twice on pressing 's'. Even if the span tag is added once, the data is sent twice on pressing 's'.

1(b) Sometimes the data being sent is wrong. While sending (on pressing 's'), the data sent is not <start_pos>:<highlighted text> but <start_pos>:<"<span id='">. These are probably the instances when on pressing 'h', the span tag get added twice in a nested fashion.

*so basically for the above two bugs, we need to resolve the problem of 2 event listeners getting added.

[Solved]
	
	earlier the page was getting kind of getting updated twice when a new tab was opened or if the page was reloaded twice. The update listener was being called once even before the page got loaded completely and once after it got loaded completely. So adding a condition to check if the page was entirely loaded before calling the scripts getContents.js and content.js solved the problems

2. When the user opens an already highlighted page and submits it (presses 's') again, the entire data is sent once again and all the entries which were already in the databases (i.e. for the part that was highlighted earlier) get duplicated. A solution for this could be to keep only one row in the database for each URI and keep the data for that URL in a concatenated form and simply update the row when the page is submitted the next time. To differentiate between the highlights of a particular user from the combined highlightings of all users for a page, we could probably maintain separate rows for all users for a URL (but all of them in a concatenated form only)

[Solved]
	
	solved using the solution suggested along with the problem itself

3. when the user clicks on a highlighted portion to remove that highlight, the color is removed but the span tag remains. This creates the problem of intersecting/overlapping span tags. So, find a way a to remove the entire span tag itself. If no other elegant solution exists, a solution to this could be same as that used for hightlihting a page when it is opened for the second time, that is, read the entire document.body.innerHTML, and replace the concerned span tag with the plain text.

[Solved]

	solved using the replaceChild property for DOM in Javascript

4. Also when the user makes two highlights which are overlapping, the problem of overlapping span tags is once again introduced. So either combine them into one or make them disjoint/separated at some point in text.

5. when the user makes a highlight across elements such as <p> or <div> etc, undesirable results are achieved. In this case the span tag wraps the corresponding <div> or <div> .. </div> or </div> tags etc., which is not allowed according to HTML's syntax.

6. Some pages insert images in the middle of a text to insert some special characters or equations which cannot be inserted using HTML. But these when highlighted introduces tags in the highlighted part as well in the text for the text node in the onclick attribute of the highlighted part.

***each of 4, 5 and 6 can be solved by giving a prior instruction to the user that highlighting in these ways is not allowed.
***Even if the user does highlight in these ways, popup a notice saying this is not allowed.
***A solution could be to parse the page each time the user makes a highlight and automatically separate the overlapping highlights or highlights spanning across <div> or <p> tags etc or highlights containing an image.
	(a) don't bother during highlighting, but when the data is sent to the server, either the client script or the server script can format the data properly and separate highlightings before storing in the database. Since during formatting and separation, the original occur_no may change, this might not be possible to be done on the server side.
	(b) don't bother during storing. When the data is retrieved, do the formatting and separation in getContents.js

7. The data needs to be stored with a better scheme as in the current scheme, the index position has been observed to be shifting.

[Solved]

	now the data being stored for each highlight is <occurence number, highlighted text>
	
8. The current algo only checks if there is a closing span tag after the found text i.e. </span>. But this is not sufficient as the span tag maybe present in the page by the creator also and not just by the extension. A solution could be to check first of all that the span is actually "WebBook" element by checking the opening <span> tag. Also, if too same pieces of text have been highlighted, then we may need to check the "id" attribute as well of <span> tag.

9. The keys used for various actions like highlighting data or sending data etc can't be single letter-keys as a person might use them for typing on a page. So they can be either Ctrl+key etc or use context menus. But using context menu every time may be tedious for a user, so better have Ctrl+key.

[Solved]

	solved using Ctrl+m for highlighting and Ctrl+b for sending data.
	
10. A user may make several highlights by using the control key. All highlights (ranges) should be highlighted in this case.

[Solved]

	solved by traversing all the selected ranges in the window.getSelection() object
	
11. provide facility for Ctrl+z etc

12. Currently if the extension is enabled in the middle of a session, one needs to reload all the tabs in order to add keypress listeners on each tab (i.e. activate the extension on each tab). One solution could be to browse all open tabs and add the listeners to all of them when the extension is loaded.

13. text inside <input>, <select> and <textarea> can still not be selected using window.getSelection()
